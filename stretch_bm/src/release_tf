#!/usr/bin/env python

#-------#
# Node broadcasts the tf for the release location, as read from action.pkl, with respect to the sim origin
#   action.pkl generated by trained PPO policy given an observation
#-------#

from __future__ import division, print_function
import rospy

import tf
import tf2_msgs.msg
import geometry_msgs.msg
import pickle



class ReleaseTfBroadcaster:

    def __init__(self, grasp_pos):
        self.pub_tf = rospy.Publisher("/tf", tf2_msgs.msg.TFMessage, queue_size=1)

        while not rospy.is_shutdown():
            # Run this loop at about 10Hz
            rospy.sleep(0.1)
            t = geometry_msgs.msg.TransformStamped()
            t.header.frame_id = "sim_origin"
            t.header.stamp = rospy.Time.now()
            t.child_frame_id = "release"
            t.transform.translation.x = point[0]
            t.transform.translation.y = point[1]
            t.transform.translation.z = point[2]

            t.transform.rotation.x = 0
            t.transform.rotation.y = 0
            t.transform.rotation.z = 0
            t.transform.rotation.w = 1

            tfm = tf2_msgs.msg.TFMessage([t])
            self.pub_tf.publish(tfm)


if __name__ == '__main__':
    try:
        rospy.init_node('release_tf')

        listener = tf.TransformListener()

        rate = rospy.Rate(10.0)
        bed_found = False
        while not bed_found:
            try:
                action = pickle.load(open('/home/hello-robot/git/action.pkl','rb'))
                point = list(action[2:])
                point.append(0.5)       # set arbitrary z position

                tfb = ReleaseTfBroadcaster(point)
                bed_found = True
            except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):
                continue

        rospy.spin()

    except KeyboardInterrupt:
        rospy.loginfo('interrupt received, so shutting down')
